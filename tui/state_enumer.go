// Code generated by "enumer -type=state -trimprefix=state -transform=kebab-case"; DO NOT EDIT.

package tui

import (
	"fmt"
)

const _stateName = "ExtensionSelectExtensionConfigSearchSearchResultsLayerStreamOrDownloadSelectionStreamDownloadFinalLoadingError"

var _stateIndex = [...]uint8{0, 15, 30, 36, 49, 54, 79, 85, 93, 98, 105, 110}

func (i state) String() string {
	i -= 1
	if i < 0 || i >= state(len(_stateIndex)-1) {
		return fmt.Sprintf("state(%d)", i+1)
	}
	return _stateName[_stateIndex[i]:_stateIndex[i+1]]
}

var _stateValues = []state{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}

var _stateNameToValueMap = map[string]state{
	_stateName[0:15]:    1,
	_stateName[15:30]:   2,
	_stateName[30:36]:   3,
	_stateName[36:49]:   4,
	_stateName[49:54]:   5,
	_stateName[54:79]:   6,
	_stateName[79:85]:   7,
	_stateName[85:93]:   8,
	_stateName[93:98]:   9,
	_stateName[98:105]:  10,
	_stateName[105:110]: 11,
}

// stateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func stateString(s string) (state, error) {
	if val, ok := _stateNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to state values", s)
}

// stateValues returns all values of the enum
func stateValues() []state {
	return _stateValues
}

// IsAstate returns "true" if the value is listed in the enum definition. "false" otherwise
func (i state) IsAstate() bool {
	for _, v := range _stateValues {
		if i == v {
			return true
		}
	}
	return false
}
