// Code generated by "enumer -type=Preset -trimprefix=Preset"; DO NOT EDIT.

package templates

import (
	"fmt"
)

const _PresetName = "LuaFennelTypescript"

var _PresetIndex = [...]uint8{0, 3, 9, 19}

func (i Preset) String() string {
	if i < 0 || i >= Preset(len(_PresetIndex)-1) {
		return fmt.Sprintf("Preset(%d)", i)
	}
	return _PresetName[_PresetIndex[i]:_PresetIndex[i+1]]
}

var _PresetValues = []Preset{0, 1, 2}

var _PresetNameToValueMap = map[string]Preset{
	_PresetName[0:3]:  0,
	_PresetName[3:9]:  1,
	_PresetName[9:19]: 2,
}

// PresetString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PresetString(s string) (Preset, error) {
	if val, ok := _PresetNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Preset values", s)
}

// PresetValues returns all values of the enum
func PresetValues() []Preset {
	return _PresetValues
}

// IsAPreset returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Preset) IsAPreset() bool {
	for _, v := range _PresetValues {
		if i == v {
			return true
		}
	}
	return false
}
